generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  profiles  Profile[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Profile {
  id         String     @id @default(uuid())
  userId     String     @map("user_id")
  name       String
  color      String?
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks      Task[]
  categories Category[]
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@map("profiles")
}

model Category {
  id        String   @id @default(uuid())
  profileId String   @map("profile_id")
  name      String
  color     String?
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  tasks     Task[]
  createdAt DateTime @default(now()) @map("created_at")

  @@map("categories")
}

model Task {
  id          String     @id @default(uuid())
  profileId   String     @map("profile_id")
  categoryId  String?    @map("category_id")
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?  @map("due_date")
  priority    Priority   @default(MEDIUM)
  sortOrder   Int        @default(0) @map("sort_order")
  profile     Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@map("tasks")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
